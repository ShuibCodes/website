{"ast":null,"code":"var _jsxFileName = \"/Users/shuibabdillahi/Downloads/01-starting-project 3/src/components/quotes/QuoteList.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment } from 'react';\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuoteList = props => {\n  _s();\n\n  const sortQuotes = (quotes, ascending) => {\n    return quotes.sort((quoteA, quoteB) => {\n      if (ascending) {\n        return quoteA.id > quoteB.id ? 1 : -1;\n      } else {\n        return quoteA.id < quoteB.id ? 1 : -1;\n      }\n    });\n  };\n\n  const history = useHistory();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search); // a boolean (true or false depending if asc is false)which is used in ternary operator in JSX below \n\n  const isSortingAscending = queryParams.get('sort') === 'asc'; // this functionexoected asceing whihc is boolean \n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    // key and value pair for queryParams  to use in URL \n    // changes url value depending on order \n    history.push('/quotes?sort=' + (isSortingAscending ? 'dec' : 'asc'));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.sorting,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: changeSortingHandler,\n        children: isSortingAscending ? 'Descending' : 'Ascending'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.list,\n      children: sortedQuotes.map(quote => /*#__PURE__*/_jsxDEV(QuoteItem, {\n        id: quote.id,\n        author: quote.author,\n        text: quote.text\n      }, quote.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuoteList, \"azjqGSEfmvz5+G/YRUZm7OceOpI=\", false, function () {\n  return [useHistory, useLocation];\n});\n\n_c = QuoteList;\nexport default QuoteList;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteList\");","map":{"version":3,"sources":["/Users/shuibabdillahi/Downloads/01-starting-project 3/src/components/quotes/QuoteList.js"],"names":["Fragment","QuoteItem","classes","useHistory","useLocation","QuoteList","props","sortQuotes","quotes","ascending","sort","quoteA","quoteB","id","history","location","queryParams","URLSearchParams","search","isSortingAscending","get","sortedQuotes","changeSortingHandler","push","sorting","list","map","quote","author","text"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAAQC,UAAR,EAAoBC,WAApB,QAAsC,kBAAtC;;;AACA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAG3B,QAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,SAAT,KAAuB;AACxC,WAAOD,MAAM,CAACE,IAAP,CAAY,CAACC,MAAD,EAASC,MAAT,KAAoB;AACrC,UAAIH,SAAJ,EAAe;AACb,eAAOE,MAAM,CAACE,EAAP,GAAYD,MAAM,CAACC,EAAnB,GAAwB,CAAxB,GAA4B,CAAC,CAApC;AACD,OAFD,MAEO;AACL,eAAOF,MAAM,CAACE,EAAP,GAAYD,MAAM,CAACC,EAAnB,GAAwB,CAAxB,GAA4B,CAAC,CAApC;AACD;AACF,KANM,CAAP;AAOD,GARD;;AAUF,QAAMC,OAAO,GAAGX,UAAU,EAA1B;AACA,QAAMY,QAAQ,GAAGX,WAAW,EAA5B;AAEE,QAAMY,WAAW,GAAG,IAAIC,eAAJ,CAAoBF,QAAQ,CAACG,MAA7B,CAApB,CAhB2B,CAmB3B;;AACA,QAAMC,kBAAkB,GAAGH,WAAW,CAACI,GAAZ,CAAgB,MAAhB,MAA4B,KAAvD,CApB2B,CAsB3B;;AAEA,QAAMC,YAAY,GAAGd,UAAU,CAACD,KAAK,CAACE,MAAP,EAAcW,kBAAd,CAA/B;;AAEA,QAAMG,oBAAoB,GAAG,MAAM;AACjC;AAEE;AACFR,IAAAA,OAAO,CAACS,IAAR,CAAa,mBAAmBJ,kBAAkB,GAAG,KAAH,GAAW,KAAhD,CAAb;AAED,GAND;;AAQA,sBACE,QAAC,QAAD;AAAA,4BACA;AAAK,MAAA,SAAS,EAAEjB,OAAO,CAACsB,OAAxB;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEF,oBAAjB;AAAA,kBAAyCH,kBAAkB,GAAG,YAAH,GAAkB;AAA7E;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADA,eAIE;AAAI,MAAA,SAAS,EAAEjB,OAAO,CAACuB,IAAvB;AAAA,gBACGJ,YAAY,CAACK,GAAb,CAAkBC,KAAD,iBAChB,QAAC,SAAD;AAEE,QAAA,EAAE,EAAEA,KAAK,CAACd,EAFZ;AAGE,QAAA,MAAM,EAAEc,KAAK,CAACC,MAHhB;AAIE,QAAA,IAAI,EAAED,KAAK,CAACE;AAJd,SACOF,KAAK,CAACd,EADb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAnDD;;GAAMR,S;UAaUF,U,EACCC,W;;;KAdXC,S;AAqDN,eAAeA,SAAf","sourcesContent":["import { Fragment } from 'react';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\nimport {useHistory, useLocation} from 'react-router-dom'\nconst QuoteList = (props) => {\n\n\n  const sortQuotes = (quotes, ascending) => {\n    return quotes.sort((quoteA, quoteB) => {\n      if (ascending) {\n        return quoteA.id > quoteB.id ? 1 : -1;\n      } else {\n        return quoteA.id < quoteB.id ? 1 : -1;\n      }\n    });\n  };\n\nconst history = useHistory()\nconst location = useLocation()\n\n  const queryParams = new URLSearchParams(location.search)\n\n\n  // a boolean (true or false depending if asc is false)which is used in ternary operator in JSX below \n  const isSortingAscending = queryParams.get('sort') === 'asc'\n\n  // this functionexoected asceing whihc is boolean \n\n  const sortedQuotes = sortQuotes(props.quotes,isSortingAscending )\n\n  const changeSortingHandler = () => {\n    // key and value pair for queryParams  to use in URL \n\n      // changes url value depending on order \n    history.push('/quotes?sort=' + (isSortingAscending ? 'dec' : 'asc'));\n\n  }\n  \n  return (\n    <Fragment>\n    <div className={classes.sorting}>\n      <button onClick={changeSortingHandler} >{isSortingAscending ? 'Descending' : 'Ascending'}</button>\n    </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n"]},"metadata":{},"sourceType":"module"}